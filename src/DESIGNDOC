			+--------------------+
			|        CS 153      |
			| PROJECT 1: THREADS |
			|   DESIGN DOCUMENT  |
			+--------------------+
				   
---- GROUP ----

>> Fill in the names and email addresses of your group members.

Alexander Ortiz <aorti017@ucr.edu> <861090734>
Kenny Luu <kluu006@ucr.edu> <861121247>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			     ALARM CLOCK
			     ===========

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.
static struct list sleep_list:
This was used to contain the threads that were sleeping, as in the waiting state. 

struct list_elem sleeping_elem:
This was used to interface with the list functions.

int64_t wake_time:
This member was used to keep track of when a thread should wake up.
---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to timer_sleep(),
>> including the effects of the timer interrupt handler.
timer_sleep() gets the current thread then disables interrupts. After this
blocks the current thread, inserts this thread into an ordered list, sleep_list,
that contains all of the sleeping threads and restores the state.

>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?
We kept the list of sleeping threads sorted in ascending order so that the time
spent iterating through the list of sleeping threads was optimized, which happens
during the timer interrupt handler.

---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?
To avoid race conditions we temporarily disable interrupts while reading and writing
from and to the list containing the sleeping elements, after we finish we restore the state
of the interrupts.

>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?
To avoid interrupts we disbale interrupts while reading and writing from 
and to the list as well as unblocking threads inside of the timer interrupt
handler and restore state once the interrupt handler has finished. 


---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> another design you considered?
We chose this design because disabling interrupts during reads and writes to 
sensitive data structures ensured that race conditions would be non-existent. 
If we had chose to not disable interrupts we would have the possibility of
race conditions resulting in invalid reads and writes to sensitive data. 


			 PRIORITY SCHEDULING
			 ===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.
struct list donators:
This list is an element of the thread struct, it keeps track
of which threads have donated to the current thread.

>> B2: Explain the data structure used to track priority donation.
>> Use ASCII art to diagram a nested donation.  (Alternately, submit a
>> .png file.)
We used a list to contain a thread's donors, the elements of the list are threads which
allow for nesting donations since each thread has a list of donors.
---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?
We traverse the list of waiters until we find the waiting
thread with the highest priority and wake that one up.

>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?
A thread with a low priority currently has a lock that a thread
with a higher priority wants, so the higher priority thread would
donate its priority to the low priority thread so that it is able
to release its lock.

>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.
Once the lock releases the thread with the highest priority
will acquire it by calling lock_acquire().

---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?
Two threads could try to access their priority at the same time. While one tries to read their priority 
or any other necessary variables and the other writes to any of them, then this race condition could cause incorrect values to be read or 
written. You could use a lock to avoid this, a lock would ensure only a single thread
access the priority at a time. 

---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?
We chose to keep track of the donors using lists because this implementation
would allow for easy nesting of donors. Where as using another data structure, such
as a hashtable, would make handling and having nested donations difficult and 
limited. We also chose to create a function that handles determining priority with 
donations to ensure that the proper priority is used when comparing for scheduling
and acqiring locks, this function also helps reduce redundant code needed when getting
a thread's priority. 

			  ADVANCED SCHEDULER
			    (If Attempted)
			  ==================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> C2: Suppose threads A, B, and C have nice values 0, 1, and 2.  Each
>> has a recent_cpu value of 0.  Fill in the table below showing the
>> scheduling decision and the priority and recent_cpu values for each
>> thread after each given number of timer ticks:

timer  recent_cpu    priority   thread
ticks   A   B   C   A   B   C   to run
-----  --  --  --  --  --  --   ------
 0
 4
 8
12
16
20
24
28
32
36

>> C3: Did any ambiguities in the scheduler specification make values
>> in the table uncertain?  If so, what rule did you use to resolve
>> them?  Does this match the behavior of your scheduler?

>> C4: How is the way you divided the cost of scheduling between code
>> inside and outside interrupt context likely to affect performance?

---- RATIONALE ----

>> C5: Briefly critique your design, pointing out advantages and
>> disadvantages in your design choices.  If you were to have extra
>> time to work on this part of the project, how might you choose to
>> refine or improve your design?

>> C6: The assignment explains arithmetic for fixed-point math in
>> detail, but it leaves it open to you to implement it.  Why did you
>> decide to implement it the way you did?  If you created an
>> abstraction layer for fixed-point math, that is, an abstract data
>> type and/or a set of functions or macros to manipulate fixed-point
>> numbers, why did you do so?  If not, why not?

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?
Difficulty was fair but we encountered an error that we could not be helped with.

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?
Yes, it helped us understand how threads run and are scheuled.

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
